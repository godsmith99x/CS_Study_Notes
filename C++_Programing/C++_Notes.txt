c++ keywords, ref: https://en.cppreference.com/w/cpp/keyword


std::cout is the “character output stream”. It is pronounced “see-out”.
	
<< is an operator that comes right after it.

"Hello World!\n" is what’s being outputted here. You need double quotes around text. The \n is a special character that indicates a new line.

; is a punctuation that tells the computer that you are at the end of a statement. It is similar to a period in a sentence.

ex:
	#include <iostream>


	int main() {
		
		int favNum;
		
		std::cout << "Enter your favorite number between 0-100: " << std::endl;

		//takes input from user through the terminal
		std::cin >> favNum; 

		std::cout << "Wow! That's my favorite number too!" << std::endl;

		std::cout << "No, " << favNum << " really is my favorite." << std::endl;

		return 0;
	}


preprocessor
	prepares the code for the compiler
	each comments is removed and replaced with single space
	runs each preprocessor directives, i.e. lines that start with #
		ex: #include<iostream>
			#if, #elif, #else, #endif, #ifdef, #ifndef, #define, #undef, #line, #error, #pragma

main function
	every c++ program must have one and only one main function and must return an integer
	it can take no arguments, ex:

		int main() {
			//your code
			return 0;
		}
	

	or, it can take arguments, ex:

		int main(int argc, char *argv[]) {
			//your code
			return 0;
		}
		//argc stands for argument count
		//argv stands for argument vector

namespaces - containers to group code entities so that repeated names are not confused by the compiler
	:: is the scope resolution operator
	namespace invoked in 1 of 3 ways
		1. invoke at every use
			most flexible  when using multiple namespaces
			only invokes specific functions uses
			ex: std::cout << "Hello World";
		2. using namespace to invoke entire namespace in header
			invoking the entire namespace lead to errors if name you created conflicts
			ex: using namespace std;
		3. qualified using namespace to invoke all the specific functions from namespace that are used
			ex: using std::cout;
				using std::cin;

basic i/o 
	cout - standard output stream, default console
	cin - standard input stream, default keyboard
	<< insertion operator, used with output streams
	endl - end line operator, flushes output stream if there is a buffer
		<< does not automatically move to next line, must use std::endl; or "\n";
	>> extraction operator, used with input streams
		any white space is considered end of input but computer will will keep recording whatever is typed on keyboard until enter is pressed, items after the white space will just be in the standard input stream's buffer

	ex:
	#include <iostream>

	using namespace std;


	int main() {
		
		cout << "Hello World!" << endl;

		cout << "Hello";
		cout << " World!" << endl;

		cout << "Hello" << " World!" << endl;

		cout << "Hello" << " World!\n";

		cout << "Hello\nOut\nThere\n";

		int num1;
		int num2;
		double num3;

		cout << "Enter an integer: ";
		cin >> num1;
		cout << "You entered: " << num1 << endl;

		cout << "Enter another integer: ";
		cin >> num2;
		cout << "You entered " << num1 << " first, and you entered " << num2 << " second." << endl;

		cout << "Enter two integers with a space in between:";
		cin >> num1 >> num2;
		cout << "You entered: " << num1 << " and " << num2 << "." << endl;

		cout << "Enter a decimal number:";
		cin >> num3;
		cout << "You entered: " << num3 << endl;

		return 0;
	}


variables - assigning a name to a location in memory (RAM)
	variables must have:
	1) declared type
	2) value
	variable names must begin with letter or underscore

	initializing variables, ex:
		int age; // uninitialized
		int age = 21; // c-like initialization
		int age (21); // constructor initialization
		int age {21}; // c++11 list initialization

	local variables - declared within a function and only usable within that function

	global variables - declared outside of a function and can be used anywhere, automatically initialized to zero
		global variables should rarely be used

c++ primitive data types

	character
		char - exactly one byte, or 8 bits
		char16_t - at least 16 bits
		char32_t - at least 32 bits
		wchar_t - can represent largest available character set

	integer
		signed - default, so don't have to use keyword
		unsigned - integers that are zero or positive values, must use keyword or assumed to be signed
		short - at least 16 bits
		long - at least 32 bits
		long long - at least 64 bits

	floating point
		float - 7 decimal digits
		double - 15 decimal digits
		long double - 19 decimal digits

	boolean
		
sizeof operator
	returns size of type or variable in bytes
	required include files <climits> and <cfloat>
	
	ex:
	
	