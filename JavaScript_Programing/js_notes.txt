//const - keyword for variable that doesn't change value
    //var - keyword for variable, rarely used in functional programing
    //let - keyword for variable, rarely used in functional programing

//object literal - complex data structure,  typically used to make a record of related values
    //ex:

  const meal = {
    description: 'Breakfast',
    calories: 180,
    date: new Date(2020, 0, 1),
    };

    console.log(meal.date.toString());
    console.log(meal.calories);

//array data structure
    const meals = [
        {description: 'Breakfast', calories: 180, date: new Date(2020, 0, 1)},
        {description: 'Snack', calories: 265, date: new Date(2020, 0, 1)},
    ];

    
    const meal1 = meals[0];

    console.log(meal1);

//functions
    //ex:

    const grade1 = 50 + Math.random() * 50.0;
    const grade2 = 50 + Math.random() * 50.0;
    const grade3 = 50 + Math.random() * 50.0;

    console.log(grade1, letterGrade(grade1));

    function letterGrade(grade) {
        if (grade >= 90) {
            return 'A';
        } else if (grade >= 80) {
            return 'B';
        } else if (grade >= 70) {
            return 'C';
        } else if (grade >= 60) {
            return 'D';
        } else {
            return 'F';
        }
    }

//spread syntax   
    //copy and add data to new object literal with spread operator
    const meal = {
        id: 1,
        description: 'Breakfast',
    };

    const updateMeal = {
        //... before name means to inject data into new item but if any of the fields match, those in the new item take precedence 
        //injects a calories field in meal object literal
        //takes all data from meal object literal but uses this description instead
        ...meal,
        calories: 600,
        description: 'Brunch',
    };

    //logs both data structures to the console
    console.log(meal, updateMeal);

    //remove data when copying to new object literal with destructuring and rest syntax
    const meal = {
        id: 1,
        description: 'Breakfast',
    };

    const updatedMeal = {
        //... before name means to inject data into new item but if any of the fields match, those in the new item take precedence 
        //injects a calories field in meal object literal
        //takes all data from meal object literal but uses this description instead
        ...meal,
        calories: 600,
        description: 'Brunch',
    };

    console.log(meal, updatedMeal);

    //this is a verbose way to just get the two fields we want but more elegant to use destructuring
    //const description = updatedMeal.description;
    //const calories = updatedMeal.calories;

    //example of destructuring - makes two new constants each with the values from updatedMeal const
    const {description, calories} = updatedMeal;

    console.log(description, calories);

    //destructuring with rest(...) syntax
    //creates two new constants, an id constant with just the value from that field and a new object literal, called mealWithoutId, with all data from updateMeal without the id field
    const {id, ...mealWithoutId} = updateMeal;

    console.log(mealWithoutId);

    //quiz:
    const meal = {
    description: 'Dinner',
    };
    // 1. In an Immutable way, add a property to the
    // meal called calories setting it's value to 200,
    // then log the result to the console

    const updatedMeal = {
    ...meal,
    calories: 200,
    };

    console.log(updatedMeal);


    // 2. In an Immutable way, increase the calories 
    // by 100 and print the result to the console

    const mealNewCalories = {
    ...updatedMeal,
    calories: updatedMeal.calories + 100,
    };

    console.log(mealNewCalories);


    // 3. In an Immutable way, remove the calories property and log the result to the console

    // See solution at: https://jsbin.com/sunewil/edit?js,console

    const {calories, ...mealNewNoCalories} = mealNewCalories;
    console.log(mealNewNoCalories);

//spread operator on an array

    //use spread syntax to update an immutable array
    const meals = [
        {id: 1, description: 'Breakfast', calories: 420},
        {id: 2, description: 'Lunch', calories: 520},
    ];

    const newMeal = {
        id: 3,
        description: 'Snack',
        calories: 180,
    };

    //... before meals means copy all the data from meals into new object literal with newMeal info as well
    const updatedMeals = [...meals, newMeal];

    console.log(meals, updatedMeals);

//using map function on an array

    const numbers = [1, 2, 3];

    function double(number) {
        return number * 2;
    }

    const doubledNumbers = numbers.map(double);

    console.log(doubledNumbers);

    //ex:
    //use map function to update an item in an immutable array
    const meals = [
        {id: 1, description: 'Breakfast', calories: 420},
        {id: 2, description: 'Lunch', calories: 520},
    ];

    const newMeal = {
        id: 3,
        description: 'Snack',
        calories: 180,
    };

    //... before meals means copy all the data from meals into new object literal with newMeal info as well
    const updatedMeals = [...meals, newMeal];

    console.log(meals, updatedMeals);

    //creates a new object literal, called updatedMealsDescription, by iterating over each index in the updatedMeals array and running the updateDescription function at each point
    const updatedMealsDescription = updatedMeals.map(updateDescription);


    //looks at the id of the object literal in the array at each index of a matrix, and if the id is 2, it updates the description and copies it into a new array, called updatedMealsDescription, otherwise it just copies the full object literal, unchanged, into the new array
    function updateDescription (meal) {
        if (meal.id === 2) {
            return {
                ...meal,
                description: 'Early Lunch',
            };
        }
        return meal;
    }

    console.log(updatedMealsDescription);

//using filter function on an array to remove items
    //use map function to update an item in an immutable array
    const meals = [
        {id: 1, description: 'Breakfast', calories: 420},
        {id: 2, description: 'Lunch', calories: 520},
    ];

    const newMeal = {
        id: 3,
        description: 'Snack',
        calories: 180,
    };

    //... before meals means copy all the data from meals into new object literal with newMeal info as well
    const updatedMeals = [...meals, newMeal];

    console.log(meals, updatedMeals);

    //creates a new object literal, called updatedMealsDescription, by iterating over each index in the updatedMeals array and running the updateDescription function at each point
    const updatedMealsDescription = updatedMeals.map(updateDescription);


    //looks at the id of the object literal in the array at each index of a matrix, and if the id is 2, it updates the description and copies it into a new array, called updatedMealsDescription, otherwise it just copies the full object literal, unchanged, into the new array
    function updateDescription (meal) {
        if (meal.id === 2) {
            return {
                ...meal,
                description: 'Early Lunch',
            };
        }
        return meal;
    }

    console.log(updatedMealsDescription);

    //uses filter function on an array to remove an item
    //within the filter function, we are calling an anonymous function to return true if we want the item included in the new array, called filtered meals, and false if we don't. we are filtering out id = 1
    const filteredMeals = updatedMeals.filter(function(meal){
        return meal.id !== 1;
    });

    console.log(filteredMeals);

    quiz:
    // 1. create a constant named friends, 
    // which is an array that contains 2 
    // names of your choosing.

    const friends = ['Amanda', 'Jeffrey'];

    // 2. Create a new constant named updatedFriends, 
    // which includes the friends array values plus 
    // one additional name

    const updatedFriends = [...friends, 'Nathan'];

    // 3. Create a new constant named friendNameLengths, 
    // which is based on the array updatedFriends, 
    // but instead of having the friends names, 
    // have the array store the length of each persons name.

    const friendNameLengths = updatedFriends.map(nameLength);

    function nameLength(name) {
    return name.length;
    }

    // 4. Create a new constant named shorterNamedFriends, 
    // which will be a list of the friends except the friend with the longest name.

    const maxNameLength = Math.max(...friendNameLengths);

    const shorterNamedFriends = updatedFriends.filter(function(name){
    return name.length < maxNameLength;  
    });

    // 5. Print each variable to the console.

    console.log(friends, updatedFriends, friendNameLengths, maxNameLength, shorterNamedFriends);

    // Solution can be seen at: 
    // https://jsbin.com/nevonet/1/edit?js,console


//find sum of all the items in the array
    const grades = [60, 55, 80, 90, 99, 92, 75, 72];

    //pure function that takes two arguments and returns their sum
    function sum (acc, grade) {
        return acc + grade;
    }

    //uses reduce to map over the numbers array and sum function is passed in as argument
    //therefore sum function takes in first two items of the array, which are 60 & 55, and sums them to 115, which is returned
    //the returned value of 115 becomes the acc and the next element in the array becomes the grade in the next round of the sum function
    //the acc argument in this type of function is often called the accumulator, hence the choice in variable name
    const total = grades.reduce(sum);

    //gives the number of elements in the grades array by counting its length
    const count = grades.length;

    //we can pass in an initial value of the acc by giving the groupByGrade an argument when we call it, and it doesn't have to be a number
    //we are going to pass an empty object literal ({}) as a second argument which reduce function will begin to fill with grades
    function groupByGrade (acc, grade) {
        //destructure acc values into an object we can use to count the number of each letter grade and initialize it so that we never have to deal with a null
        const {a = 0, b = 0, c = 0, d = 0, f = 0} = acc;
        if (grade >= 90) {
            //returns an object with the value of the accumulator spread into it and increments the number of A's if any
            return { ...acc, a: a + 1};
        } else if (grade >= 80) {
            return { ...acc, b: b + 1};
        } else if (grade >= 70) {
            return { ...acc, c: c + 1};
        } else if (grade >= 60) {
            return { ...acc, d: d + 1};
        } else {
            return { ...acc, f: f + 1};
        }
    }

    //maps over the grades array and runs the groupByGrade function
    //passes an empty object literal as the second argument
    const letterGradeCount = grades.reduce(groupByGrade, {});

    console.log(total, count, total/count, letterGradeCount);

//quiz:
    const reviews = [4.5, 4.0, 5.0, 2.0, 1.0, 5.0, 3.0, 4.0, 1.0, 5.0, 4.5, 3.0, 2.5, 2.0];

    const countByReviews = reviews.reduce(countReviews, {});

    function countReviews (acc, review) {
    const count = acc[review] || 0;
    return { ...acc, [review]: count + 1}
    }


    
    console.log(countByReviews);



    // 1. Using the reduce function, create an object that
    // has properties for each review value, where the value
    // of the property is the number of reviews with that score.
    // for example, the answer should be shaped like this:
    // { 4.5: 1, 4: 2 ...}
    // 
    // TIP: checkout computed properties discussed here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names
    // solution can be found at:
    // https://jsbin.com/dehiqux/1/edit?js,console

//definition: higher-order function - either takes a function as an argument or returns a function

//definition: closure - functions that can access and use variables that aren't directly passed into the function


//replace function that takes two arguments with function that only needs one argument and applies to array
    //function that takes two arguments and uses those arguments to returns them using template literal syntax (` `) and string interpolation ${placeholder}
    /*function greet(greeting, name) {
        return `${greeting} ${name}`;
    } */

    //console.log(greet('Good morning', 'James'));

    //apply greeting to array of friends

    //this function is an example of a closure
    function greet(greeting) {
        return function (name) {
            return `${greeting} ${name}`;
        };
    }

    const friends = ['Nate', 'Jim', 'Scott', 'Dean'];

    //calls greet with a greeting argument, which is mapped across the friends array
    const friendGreetings = friends.map(greet('Good Morning'));

    console.log(friendGreetings);