//const - keyword for variable that doesn't change value
    //var - keyword for variable, rarely used in functional programing
    //let - keyword for variable, rarely used in functional programing

//object literal - complex data structure,  typically used to make a record of related values
    //ex:

  const meal = {
    description: 'Breakfast',
    calories: 180,
    date: new Date(2020, 0, 1),
    };

    console.log(meal.date.toString());
    console.log(meal.calories);

array data structure
    const meals = [
        {description: 'Breakfast', calories: 180, date: new Date(2020, 0, 1)},
        {description: 'Snack', calories: 265, date: new Date(2020, 0, 1)},
    ];

    
    const meal1 = meals[0];

    console.log(meal1);

//functions
    //ex:

    const grade1 = 50 + Math.random() * 50.0;
    const grade2 = 50 + Math.random() * 50.0;
    const grade3 = 50 + Math.random() * 50.0;

    console.log(grade1, letterGrade(grade1));

    function letterGrade(grade) {
        if (grade >= 90) {
            return 'A';
        } else if (grade >= 80) {
            return 'B';
        } else if (grade >= 70) {
            return 'C';
        } else if (grade >= 60) {
            return 'D';
        } else {
            return 'F';
        }
    }

//spread syntax   
    //copy and add data to new object literal with spread operator
    const meal = {
        id: 1,
        description: 'Breakfast',
    };

    const updateMeal = {
        //... before name means to inject data into new item but if any of the fields match, those in the new item take precedence 
        ...meal,
        //injects a calories field in meal object literal
        calories: 600,
        //takes all data from meal object literal but uses this description instead
        description: 'Brunch',
    };

    //logs both data structures to the console
    console.log(meal, updateMeal);

    //remove data when copying to new object literal with spread operator
    const meal = {
        id: 1,
        description: 'Breakfast',
    };

    const updateMeal = {
        //... before name means to inject data into new item but if any of the fields match, those in the new item take precedence 
        ...meal,
        //injects a calories field in meal object literal
        calories: 600,
        //takes all data from meal object literal but uses this description instead
        description: 'Brunch',
    };

    console.log(meal, updateMeal);

    //this is a verbose way to just get the two fields we want but more elegant to use destructuring
    //const description = updateMeal.description;
    //const calories = updateMeal.calories;

    //example of destructuring
    const {description, calories} = updateMeal;

    console.log(description, calories);

    //destructuring with rest(...) syntax
    //creates a new object literal with all data from updateMeal without the id field
    const {id, ...mealWithoutId} = updateMeal;

    console.log(mealWithoutId);

    //quiz:
    const meal = {
    description: 'Dinner',
    };
    // 1. In an Immutable way, add a property to the
    // meal called calories setting it's value to 200,
    // then log the result to the console

    const updatedMeal = {
    ...meal,
    calories: 200,
    };

    console.log(updatedMeal);


    // 2. In an Immutable way, increase the calories 
    // by 100 and print the result to the console

    const mealNewCalories = {
    ...updatedMeal,
    calories: updatedMeal.calories + 100,
    };

    console.log(mealNewCalories);


    // 3. In an Immutable way, remove the calories property and log the result to the console

    // See solution at: https://jsbin.com/sunewil/edit?js,console

    const {calories, ...mealNewNoCalories} = mealNewCalories;
    console.log(mealNewNoCalories);

//spread operator on an array

    //use spread syntax to update an immutable array
    const meals = [
        {id: 1, description: 'Breakfast', calories: 420},
        {id: 2, description: 'Lunch', calories: 520},
    ];

    const newMeal = {
        id: 3,
        description: 'Snack',
        calories: 180,
    };

    //... before meals means copy all the data from meals into new object literal with newMeal info as well
    const updatedMeals = [...meals, newMeal];

    console.log(meals, updatedMeals);

